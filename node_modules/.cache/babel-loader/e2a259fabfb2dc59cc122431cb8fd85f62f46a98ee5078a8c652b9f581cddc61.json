{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import ReactDatePicker from\"react-datepicker\";import{queryDatabase}from\"./sqliteHelper\";// Assuming you have a helper to interact with SQLite\nimport\"react-datepicker/dist/react-datepicker.css\";import\"./App.css\";// Include the CSS for styling\n// Interface to define the shape of category and question data\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[categories,setCategories]=useState([]);// Category list\nconst[selectedCategory,setSelectedCategory]=useState(null);// Selected category\nconst[selectedDate,setSelectedDate]=useState(null);// Date or null\nconst[questions,setQuestions]=useState([]);// Fetched questions for the selected date\nconst[selectedAnswer,setSelectedAnswer]=useState(null);// Answer selected by the user\nconst[isCorrect,setIsCorrect]=useState(null);// Whether the answer is correct\nconst[correctAnswer,setCorrectAnswer]=useState(null);// Store the correct answer for the selected question\nconst handleDateChange=date=>{setSelectedDate(date);// Now it can handle both Date and null\n};// Fetch categories on component mount\nuseEffect(()=>{const fetchCategories=async()=>{const result=await queryDatabase(\"SELECT * FROM categories\");setCategories(result||[]);};fetchCategories();},[]);// Fetch questions based on category and selected date\nuseEffect(()=>{const fetchQuestions=async()=>{if(!selectedCategory||!selectedDate)return;const formattedDate=selectedDate.toISOString().split('T')[0];// Format date as YYYY-MM-DD\nconst query=\"\\n        SELECT \\n          q.id, q.question, q.option_1, q.option_2, q.option_3, q.option_4,\\n          c.name AS category, q.display_date\\n        FROM quiz_questions q\\n        JOIN categories c ON q.category_id = c.id\\n        WHERE q.category_id = \".concat(selectedCategory,\" AND q.display_date = '\").concat(formattedDate,\"'\\n      \");const result=await queryDatabase(query);setQuestions(result||[]);};fetchQuestions();},[selectedCategory,selectedDate]);const handleAnswerChange=event=>{setSelectedAnswer(Number(event.target.value));};const handleSubmitAnswer=async questionId=>{// Fetch the correct answer only when the user submits\nconst query=\"\\n      SELECT correct_answer \\n      FROM quiz_questions \\n      WHERE id = \".concat(questionId,\"\\n    \");const result=await queryDatabase(query);if(result&&result[0]){setCorrectAnswer(result[0].correct_answer);// Set the correct answer\nconst isAnswerCorrect=selectedAnswer===result[0].correct_answer;setIsCorrect(isAnswerCorrect);// Check if the user's answer is correct\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"quiz-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Quiz App\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"category-selector\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"category\",children:\"Select Category: \"}),/*#__PURE__*/_jsxs(\"select\",{id:\"category\",value:selectedCategory!==null&&selectedCategory!==void 0?selectedCategory:\"\",onChange:e=>setSelectedCategory(Number(e.target.value)),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",disabled:true,children:\"Select a Category\"}),categories.map(category=>/*#__PURE__*/_jsx(\"option\",{value:category.id,children:category.name},category.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"date-picker\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"date\",children:\"Select Date: \"}),/*#__PURE__*/_jsx(ReactDatePicker,{selected:selectedDate,onChange:handleDateChange,dateFormat:\"yyyy-MM-dd\",minDate:new Date()})]}),/*#__PURE__*/_jsx(\"div\",{className:\"questions-container\",children:questions.length===0&&selectedCategory&&selectedDate?/*#__PURE__*/_jsx(\"p\",{children:\"No questions available for the selected date.\"}):questions.map(question=>/*#__PURE__*/_jsxs(\"div\",{className:\"question-box\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"question-text\",children:question.question}),['option_1','option_2','option_3','option_4'].map((option,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:\"option\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",id:\"\".concat(option,\"-\").concat(question.id),name:\"question-\".concat(question.id),value:idx+1,checked:selectedAnswer===idx+1,onChange:handleAnswerChange}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"\".concat(option,\"-\").concat(question.id),children:question[option]})]},idx)),/*#__PURE__*/_jsx(\"button\",{className:\"submit-button\",onClick:()=>handleSubmitAnswer(question.id),children:\"Submit Answer\"}),isCorrect!==null&&/*#__PURE__*/_jsx(\"div\",{className:\"feedback \".concat(isCorrect?'correct':'incorrect'),children:isCorrect?/*#__PURE__*/_jsx(\"p\",{children:\"Correct! \\uD83C\\uDF89\"}):/*#__PURE__*/_jsx(\"p\",{children:\"Incorrect. \\uD83D\\uDE1E\"})}),correctAnswer!==null&&selectedAnswer!==null&&selectedAnswer!==correctAnswer&&/*#__PURE__*/_jsx(\"div\",{className:\"correct-answer\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Correct Answer: Option \",correctAnswer]})})]},question.id))})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","ReactDatePicker","queryDatabase","jsx","_jsx","jsxs","_jsxs","App","categories","setCategories","selectedCategory","setSelectedCategory","selectedDate","setSelectedDate","questions","setQuestions","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","correctAnswer","setCorrectAnswer","handleDateChange","date","fetchCategories","result","fetchQuestions","formattedDate","toISOString","split","query","concat","handleAnswerChange","event","Number","target","value","handleSubmitAnswer","questionId","correct_answer","isAnswerCorrect","className","children","htmlFor","id","onChange","e","disabled","map","category","name","selected","dateFormat","minDate","Date","length","question","option","idx","type","checked","onClick"],"sources":["/Users/srivr/Documents/personalProjects/quiz/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\nimport { queryDatabase } from \"./sqliteHelper\"; // Assuming you have a helper to interact with SQLite\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./App.css\"; // Include the CSS for styling\n\n// Interface to define the shape of category and question data\ninterface Category {\n  id: number;\n  name: string;\n}\n\ninterface Question {\n  id: number;\n  question: string;\n  option_1: string;\n  option_2: string;\n  option_3: string;\n  option_4: string;\n  category: string;\n  display_date: string;\n  created_by: string;\n  creation_date: string;\n}\n\nconst App: React.FC = () => {\n  const [categories, setCategories] = useState<Category[]>([]); // Category list\n  const [selectedCategory, setSelectedCategory] = useState<number | null>(null); // Selected category\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null); // Date or null\n  const [questions, setQuestions] = useState<Question[]>([]); // Fetched questions for the selected date\n  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null); // Answer selected by the user\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null); // Whether the answer is correct\n  const [correctAnswer, setCorrectAnswer] = useState<number | null>(null); // Store the correct answer for the selected question\n\n  const handleDateChange = (date: Date | null) => {\n    setSelectedDate(date); // Now it can handle both Date and null\n  };\n\n  // Fetch categories on component mount\n  useEffect(() => {\n    const fetchCategories = async () => {\n      const result = await queryDatabase(\"SELECT * FROM categories\");\n      setCategories(result || []);\n    };\n    fetchCategories();\n  }, []);\n\n  // Fetch questions based on category and selected date\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      if (!selectedCategory || !selectedDate) return;\n\n      const formattedDate = selectedDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\n      const query = `\n        SELECT \n          q.id, q.question, q.option_1, q.option_2, q.option_3, q.option_4,\n          c.name AS category, q.display_date\n        FROM quiz_questions q\n        JOIN categories c ON q.category_id = c.id\n        WHERE q.category_id = ${selectedCategory} AND q.display_date = '${formattedDate}'\n      `;\n      const result = await queryDatabase(query);\n      setQuestions(result || []);\n    };\n\n    fetchQuestions();\n  }, [selectedCategory, selectedDate]);\n\n  const handleAnswerChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedAnswer(Number(event.target.value));\n  };\n\n  const handleSubmitAnswer = async (questionId: number) => {\n    // Fetch the correct answer only when the user submits\n    const query = `\n      SELECT correct_answer \n      FROM quiz_questions \n      WHERE id = ${questionId}\n    `;\n    const result = await queryDatabase(query);\n    if (result && result[0]) {\n      setCorrectAnswer(result[0].correct_answer); // Set the correct answer\n      const isAnswerCorrect = selectedAnswer === result[0].correct_answer;\n      setIsCorrect(isAnswerCorrect); // Check if the user's answer is correct\n    }\n  };\n\n  return (\n    <div className=\"quiz-container\">\n      <h1>Quiz App</h1>\n\n      {/* Category Dropdown */}\n      <div className=\"category-selector\">\n        <label htmlFor=\"category\">Select Category: </label>\n        <select\n          id=\"category\"\n          value={selectedCategory ?? \"\"}\n          onChange={(e) => setSelectedCategory(Number(e.target.value))}\n        >\n          <option value=\"\" disabled>Select a Category</option>\n          {categories.map((category) => (\n            <option key={category.id} value={category.id}>\n              {category.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Date Picker */}\n      <div className=\"date-picker\">\n        <label htmlFor=\"date\">Select Date: </label>\n        <ReactDatePicker\n          selected={selectedDate}\n          onChange={handleDateChange}\n          dateFormat=\"yyyy-MM-dd\"\n          minDate={new Date()}\n        />\n      </div>\n\n      {/* Display Questions */}\n      <div className=\"questions-container\">\n        {questions.length === 0 && selectedCategory && selectedDate ? (\n          <p>No questions available for the selected date.</p>\n        ) : (\n          questions.map((question) => (\n            <div key={question.id} className=\"question-box\">\n              <p className=\"question-text\">{question.question}</p>\n\n              {/* Display options as radio buttons */}\n              {['option_1', 'option_2', 'option_3', 'option_4'].map((option, idx) => (\n                <div key={idx} className=\"option\">\n                  <input\n                    type=\"radio\"\n                    id={`${option}-${question.id}`}\n                    name={`question-${question.id}`}\n                    value={idx + 1}\n                    checked={selectedAnswer === idx + 1}\n                    onChange={handleAnswerChange}\n                  />\n                  <label htmlFor={`${option}-${question.id}`}>\n                    {question[option as keyof Question]}\n                  </label>\n                </div>\n              ))}\n\n              {/* Submit button */}\n              <button\n                className=\"submit-button\"\n                onClick={() => handleSubmitAnswer(question.id)}\n              >\n                Submit Answer\n              </button>\n\n              {/* Display feedback */}\n              {isCorrect !== null && (\n                <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>\n                  {isCorrect ? <p>Correct! 🎉</p> : <p>Incorrect. 😞</p>}\n                </div>\n              )}\n\n              {/* Show correct answer if the answer is wrong */}\n              {correctAnswer !== null && selectedAnswer !== null && selectedAnswer !== correctAnswer && (\n                <div className=\"correct-answer\">\n                  <p>Correct Answer: Option {correctAnswer}</p>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}